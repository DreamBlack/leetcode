2Sum
思路1：O(n^2)两个for循环
思路2：先排序logn，之后用两个指针，根据两指针相加结果和target大小来决定指针的推进，总计复杂度为nlogn
3Sum
思路1：O(N^3)三个for循环
思路2：利用2Sum思路二的方法，先排序，对于nums中每一个数，用两个指针，根据指针相加结果和target-nums[left]-nums[right]大小来决定指针的推进，总计复杂度为O(N^2)
思路3：用两层for循环遍历数组，并记录所有两个数相加的可能结果保存在另一辅助数组中，后再次遍历原数组，找出target-nums[i]的值在辅助数组中的元素
4Sum
思路1：O(N^4)
思路2：利用3Sum思路2的方法，先排序，对于nums中每一个数，在对每一个数用一个for循环，对第二个for循环中每一个数设置两个指针，总计O(N^3)
KSum
可将问题分解为子问题，如假设k=2^m,将其分解为先保存2^(m-1)Sum的所有结果，再进行2^(m-1)Sum时两个分解的问题保存的结果之和为target，之后层层分解，最后为O(N^(2logk))
但空间复杂度也就此大大增加


总结：
1、对于已排序数组充分利用已排序的特性减少不必要的操作以改进时间消耗
2、善于运用夹逼
3、高维问题分解为低维的问题